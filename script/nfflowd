#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';

use Net::Netfilter::NetFlow::Utils;

use IPC::Run qw(run);
use Getopt::Long; # core

my $VERSION = '1.01';
$VERSION = eval $VERSION; # numify for warning-free dev releases

my $DEFAULT_CONFIG_FILE = '/etc/nfflowd.conf';
my $config_file = $DEFAULT_CONFIG_FILE;
my $help ='';

my $result = GetOptions(
    'h|help'     => \$help,
    'c|config=s' => \$config_file,
);
$help and &quit_with_help;

# bootstrap configuration:
# try requested, then default loc, then built-ins
my $local_config = load_config('nfflowd.conf');
my $config = eval{ load_config($config_file) };
if ($@ and $config_file ne $DEFAULT_CONFIG_FILE) {
    die "Failed to load requested config: $Config::Tiny::errstr\n"
}

# mix in the built-ins
$config = merge_hashes($local_config, $config);

# locate the required externals
my $conntrack = can_run($config->{conntrack}->{progname})
    or die "Failed to find a local copy of conntrack in the path\n";
# then ct2ft
# then ptee
my $flow_import = can_run($config->{flow_import}->{progname})
    or die "Failed to find a local copy of flow-import in the path\n";
my $flow_send = can_run($config->{flow_send}->{progname})
    or die "Failed to find a local copy of flow-send in the path\n";

# MAIN BODY
run [$conntrack, format($config->{conntrack})],
        \undef, init => \&conntrack_init,
    '|', \&ct2ft, '|', \&ptee, '|',
    [$flow_import, format($config->{flow_import})],
    '|', [$flow_send, format($config->{flow_send})];


# poke conntrack kernel hooks into waking up (bug?)
sub conntrack_init {
    run [$conntrack, &format($config->{conntrack}, 'init_')],
        '>', '/dev/null', '2>&1';
}

# convert the conntrack output to flow-tools CSV input format
sub ct2ft {
    # respond to SIGHUP (thanks go to perlipc man page)
    use POSIX; # core
    use Time::HiRes 'gettimeofday'; # core

    # clean up NEW entries which have not had DESTROY in TTL seconds
    my $TTL = $ENV{TTL} || (60 * 60 * 24 * 7); # seven days

    sub alrm_handler {
        # warn "Purging tracked connections older than $TTL seconds\n";
        foreach my $p (keys %{$tracker}) {
            foreach my $k (keys %{$tracker->{$_}}) {
                delete $tracker->{$p}->{$k}
                    if $tracker->{$p}->{$k} < ($^T - $TTL);
            }   
        }   
    }

    # POSIX unmasks the sigprocmask properly
    my $sigset = POSIX::SigSet->new;
    my $action = POSIX::SigAction->new(
        'alrm_handler', $sigset, &POSIX::SA_NODEFER
    );
    POSIX::sigaction(&POSIX::SIGALRM, $action);
}

# set up output tee to local syslog, and next process in pipe
sub ptee {
    use Log::Dispatch::Config;
    use Log::Dispatch::Configurator::Any;

    Log::Dispatch::Config->configure_and_watch(
        Log::Dispatch::Configurator::Any->new($config->{ptee}->{conf}) );
    my $dispatcher = Log::Dispatch::Config->instance;

    while (<>) {
        $dispatcher->notice($_);
    }
}

__END__

=head1 AUTHOR

Oliver Gorwits C<< <oliver.gorwits@oucs.ox.ac.uk> >>

=head1 COPYRIGHT & LICENSE

Copyright (c) The University of Oxford 2008.

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut

